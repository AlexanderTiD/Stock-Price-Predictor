import numpy as np
import yfinance as yf
from os import path, makedirs
import matplotlib.pyplot as plt
from django.conf import settings
from datetime import datetime, timedelta
from sklearn.linear_model import LinearRegression


def get_stock_data(ticker, years=5):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ü–∏—è–º –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É yfinance –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è –∞–∫—Ü–∏–∏
    –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç. –î–∞–Ω–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ,
    –ø–æ–¥—Ö–æ–¥—è—â–µ–º –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        ticker (str): –¢–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'AAPL', 'TSLA', 'NVDA').
        years (int, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        tuple: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞:
            - prices (numpy.ndarray): –ú–∞—Å—Å–∏–≤ —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è ML (-1, 1)
            - dates (pandas.DatetimeIndex): –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞—Ç—ã —Ü–µ–Ω

    –ü—Ä–∏–º–µ—Ä:
        >>> prices, dates = get_stock_data('AAPL', years=3)
        >>> print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(prices)} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AAPL")
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ü–∏–∏
    stock_info = yf.Ticker(ticker)

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å —Å–∞–º–æ–π –ø–µ—Ä–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–∞—Ç—ã
    hist = stock_info.history(period=f"{years}y")

    return hist['Close'].values.reshape(-1, 1), hist.index

def moving_average(prices, method='moving_average'):
    """
    –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –±—É–¥—É—â—É—é —Ü–µ–Ω—É –∞–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.

    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ,
    –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–Ω–∞.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        prices (numpy.ndarray): –ú–∞—Å—Å–∏–≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω –∞–∫—Ü–∏–∏.
        method (str, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): –ú–µ—Ç–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:
            - 'moving_average': –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ 30 –¥–Ω–µ–π
            - 'recent_trend': –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –Ω–∞ 90 –¥–Ω—è—Ö
            - 'last_price': –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–Ω–∞
            –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 'moving_average'.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        float: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏.

    –ü—Ä–∏–º–µ—Ä:
        >>> future_price = moving_average(prices, method='moving_average')
        >>> print(f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞: ${future_price:.2f}")
    """
    if method == 'moving_average':
        # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        return float(np.mean(prices[-30:]))

    elif method == 'recent_trend':
        # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 90 –¥–Ω—è—Ö
        if len(prices) > 90:
            recent_prices = prices[-90:]
            days = np.arange(len(recent_prices)).reshape(-1, 1)
            model = LinearRegression()
            model.fit(days, recent_prices)
            return float(model.predict([[len(recent_prices) + 30]])[0][0])
        else:
            return prices[-1][0]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞

    elif method == 'last_price':
        # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É
        return prices[-1][0]

def create_prediction_plot(ticker, historical_prices, historical_dates, future_price, method_used):
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏.

    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ —Ü–µ–Ω–∞–º–∏, —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–π
    —Ü–µ–Ω–æ–π –Ω–∞ 30 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥. –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –º–µ–¥–∏–∞-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        ticker (str): –¢–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞.
        historical_prices (numpy.ndarray): –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏.
        historical_dates (pandas.DatetimeIndex): –î–∞—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ü–µ–Ω.
        future_price (float): –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥.
        method_used (str): –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: URL –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≥—Ä–∞—Ñ–∏–∫–∞.

    –ü—Ä–∏–º–µ—Ä:
        >>> plot_url = create_prediction_plot('AAPL', prices, dates, 150.50, 'moving_average')
        >>> print(f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {plot_url}")
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
    plt.style.use('dark_background')
    fig, ax = plt.subplots(figsize=(14, 8))

    # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω
    ax.plot(historical_dates, historical_prices.flatten(),
            color='#2962FF', linewidth=2, label='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ')

    # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
    last_date = historical_dates[-1]
    last_price = historical_prices[-1][0]

    # –ü—Ä–æ–≥–Ω–æ–∑–Ω–∞—è —Ç–æ—á–∫–∞
    future_date = last_date + timedelta(days=30)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á–Ω–æ–π —Å—Ç–∏–ª—å –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è
    ax.scatter(last_date, last_price, color='#00E676', s=120, edgecolors='white', linewidth=2, zorder=5,
               label=f'–¢–µ–∫—É—â–∞—è: ${last_price:.2f}')

    # –ü—Ä–æ–≥–Ω–æ–∑–Ω–∞—è —Ç–æ—á–∫–∞
    ax.scatter(future_date, future_price, color='#FF6D00', s=120, edgecolors='white', linewidth=2, zorder=5,
               label=f'–ü—Ä–æ–≥–Ω–æ–∑: ${future_price:.2f}')

    # –õ–∏–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    ax.plot([last_date, future_date], [last_price, future_price],
            color='#FF6D00', linestyle='--', linewidth=2, alpha=0.8)

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º
    ax.fill_between(historical_dates, historical_prices.flatten(), alpha=0.2, color='#2962FF')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π –∏ —Å–µ—Ç–∫–∏
    ax.grid(True, alpha=0.3, linestyle='--')
    ax.set_axisbelow(True)

    # –¶–≤–µ—Ç–∞ –æ—Å–µ–π
    ax.spines['bottom'].set_color('#757575')
    ax.spines['top'].set_color('#757575')
    ax.spines['right'].set_color('#757575')
    ax.spines['left'].set_color('#757575')

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –æ—Å–∏ Y
    ax.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x:,.2f}'))

    # –ü–æ–≤–æ—Ä–æ—Ç –¥–∞—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    plt.setp(ax.xaxis.get_majorticklabels(), rotation=45, ha='right')

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–ø–∏—Å–∏
    ax.set_title(f'{ticker} - –¢–µ–∫—É—â–∞—è: ${last_price:.2f} | –ü—Ä–æ–≥–Ω–æ–∑: ${future_price:.2f}',
                 fontsize=16, fontweight='bold', pad=20, color='white')

    ax.set_xlabel('–î–∞—Ç–∞', fontsize=12, color='#BDBDBD', labelpad=10)
    ax.set_ylabel('–¶–µ–Ω–∞ ($)', fontsize=12, color='#BDBDBD', labelpad=10)

    # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
    change_percent = ((future_price - last_price) / last_price * 100)
    change_color = '#00E676' if change_percent >= 0 else '#FF5252'

    # –ï–¥–∏–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –ª–µ–≥–µ–Ω–¥–æ–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    info_text = f'''üìä {ticker} - –ê–ù–ê–õ–ò–ó
    üí∞ –¶–ï–ù–´:
    ‚î£ –¢–µ–∫—É—â–∞—è: ${last_price:.2f}
    ‚î£ –ü—Ä–æ–≥–Ω–æ–∑: ${future_price:.2f}
    ‚îó –ò–∑–º–µ–Ω–µ–Ω–∏–µ: <span style="color:{change_color}">{change_percent:+.2f}%</span>

    üìà –î–ê–ù–ù–´–ï:
    ‚î£ –ü–µ—Ä–∏–æ–¥: {len(historical_prices)} –¥–Ω–µ–π
    ‚î£ –ù–∞—á–∞–ª–æ: {historical_dates[0].strftime("%d.%m.%Y")}
    ‚îó –ö–æ–Ω–µ—Ü: {historical_dates[-1].strftime("%d.%m.%Y")}

    üîß –ú–ï–¢–û–î:
    ‚îó {method_used}

    üìã –õ–ï–ì–ï–ù–î–ê:
    ‚î£ –°–∏–Ω—è—è –ª–∏–Ω–∏—è - –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    ‚î£ –ó–µ–ª–µ–Ω–∞—è —Ç–æ—á–∫–∞ - –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
    ‚îó –û—Ä–∞–Ω–∂–µ–≤–∞—è —Ç–æ—á–∫–∞ - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 30 –¥–Ω–µ–π'''

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –Ω–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ
    x_range = ax.get_xlim()
    y_range = ax.get_ylim()
    chart_width = x_range[1] - x_range[0]
    chart_height = y_range[1] - y_range[0]

    # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –≥—Ä–∞—Ñ–∏–∫–∞ (–Ω–µ —ç–∫—Ä–∞–Ω–∞)
    info_x = x_range[0] + chart_width * 0.02  # 2% –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
    info_y = y_range[1] - chart_height * 0.05  # 5% –æ—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
    ax.text(info_x, info_y, info_text, bbox=dict(boxstyle='round', facecolor='#424242',
                      alpha=0.9, edgecolor='#757575', pad=1), fontfamily='monospace', color='white', fontsize=10,
            verticalalignment='top', linespacing=1.4)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ layout
    plt.tight_layout()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    plot_filename = f'{ticker}_prediction_{datetime.now().strftime("%Y%m%d_%H%M%S")}.png'
    plot_path = path.join(settings.MEDIA_ROOT, 'plots', plot_filename)
    makedirs(path.dirname(plot_path), exist_ok=True)

    plt.savefig(plot_path, dpi=300, bbox_inches='tight', facecolor='#121212', edgecolor='none')
    plt.close()

    return f'/media/plots/{plot_filename}'

def train_model(x, y):
    """
    –û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    –°–æ–∑–¥–∞–µ—Ç –∏ –æ–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ scikit-learn
    –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∞–∫—Ü–∏–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        x (numpy.ndarray): –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã).
        y (numpy.ndarray): –¶–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (—Ü–µ–Ω—ã –∞–∫—Ü–∏–π).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        LinearRegression: –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏.

    –ü—Ä–∏–º–µ—Ä:
        >>> model = train_model(days, prices)
        >>> prediction = model.predict([[100]])
    """
    model = LinearRegression()
    model.fit(x, y)
    return model
